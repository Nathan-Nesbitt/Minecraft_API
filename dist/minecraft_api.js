class Message{constructor(e){this.function=e}set_response_function(e){this.function=e}has_response_function(){return!!self.function}get_response_function(){return this.function}}class EventHandler extends Message{constructor(e,s=null){super(s),this.event=e}get_message(){return this.event}}class Command extends Message{constructor(e,s,t=null){super(t),this.command=e,this.arguments=s}get_message(){return this.command}get_arguments(){return this.arguments}}class MinecraftAPIClient{constructor(){this.messages=[]}async open_connection(){return this.socket&&this.socket.close(),new Promise(((e,s)=>{this.socket=new WebSocket("http://localhost:3000"),this.socket.onmessage=function(e){e=JSON.parse(e),parent.postMessage(e)},this.socket.onopen=()=>{e()},this.socket.onerror=()=>{s()}}))}generate_message(e,s){var t=e.get_message();if(e instanceof EventHandler)var n="subscribe";else if(e instanceof Command){n="commandRequest";e.get_arguments().forEach((e=>{t+=" "+e}))}return{header:{messagePurpose:n,messageType:"commandRequest",requestId:s,version:1},body:{message_type:t,version:1}}}add_message(e){if(this.messages.includes(e))throw"Event already exists";this.messages.push(e)}send_message(e){this.socket.send(JSON.stringify(e))}start(){this.open_connection().then((e=>{this.messages.forEach(((e,s)=>{e=this.generate_message(e,s),this.send_message(e)}))}),(e=>{console.log("Error connecting to the server, is it running?")}))}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
